// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: battleship/existing_games.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExistingGames struct {
	Index   string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	PlayerA string `protobuf:"bytes,2,opt,name=playerA,proto3" json:"playerA,omitempty"`
	PlayerB string `protobuf:"bytes,3,opt,name=playerB,proto3" json:"playerB,omitempty"`
	FieldA  string `protobuf:"bytes,4,opt,name=fieldA,proto3" json:"fieldA,omitempty"`
	FieldB  string `protobuf:"bytes,5,opt,name=fieldB,proto3" json:"fieldB,omitempty"`
	Turn    string `protobuf:"bytes,6,opt,name=turn,proto3" json:"turn,omitempty"`
	Ended   bool   `protobuf:"varint,7,opt,name=ended,proto3" json:"ended,omitempty"`
}

func (m *ExistingGames) Reset()         { *m = ExistingGames{} }
func (m *ExistingGames) String() string { return proto.CompactTextString(m) }
func (*ExistingGames) ProtoMessage()    {}
func (*ExistingGames) Descriptor() ([]byte, []int) {
	return fileDescriptor_14f3bd2a166fcd94, []int{0}
}
func (m *ExistingGames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistingGames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistingGames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistingGames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingGames.Merge(m, src)
}
func (m *ExistingGames) XXX_Size() int {
	return m.Size()
}
func (m *ExistingGames) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingGames.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingGames proto.InternalMessageInfo

func (m *ExistingGames) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ExistingGames) GetPlayerA() string {
	if m != nil {
		return m.PlayerA
	}
	return ""
}

func (m *ExistingGames) GetPlayerB() string {
	if m != nil {
		return m.PlayerB
	}
	return ""
}

func (m *ExistingGames) GetFieldA() string {
	if m != nil {
		return m.FieldA
	}
	return ""
}

func (m *ExistingGames) GetFieldB() string {
	if m != nil {
		return m.FieldB
	}
	return ""
}

func (m *ExistingGames) GetTurn() string {
	if m != nil {
		return m.Turn
	}
	return ""
}

func (m *ExistingGames) GetEnded() bool {
	if m != nil {
		return m.Ended
	}
	return false
}

func init() {
	proto.RegisterType((*ExistingGames)(nil), "verstakgit.battleship.battleship.ExistingGames")
}

func init() { proto.RegisterFile("battleship/existing_games.proto", fileDescriptor_14f3bd2a166fcd94) }

var fileDescriptor_14f3bd2a166fcd94 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x4a, 0x2c, 0x29,
	0xc9, 0x49, 0x2d, 0xce, 0xc8, 0x2c, 0xd0, 0x4f, 0xad, 0xc8, 0x2c, 0x2e, 0xc9, 0xcc, 0x4b, 0x8f,
	0x4f, 0x4f, 0xcc, 0x4d, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x28, 0x4b, 0x2d,
	0x2a, 0x2e, 0x49, 0xcc, 0x4e, 0xcf, 0x2c, 0xd1, 0x43, 0xa8, 0x45, 0x62, 0x2a, 0x6d, 0x66, 0xe4,
	0xe2, 0x75, 0x85, 0x6a, 0x75, 0x07, 0xe9, 0x14, 0x12, 0xe1, 0x62, 0xcd, 0xcc, 0x4b, 0x49, 0xad,
	0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x24, 0xb8, 0xd8, 0x0b, 0x72, 0x12,
	0x2b, 0x53, 0x8b, 0x1c, 0x25, 0x98, 0xc0, 0xe2, 0x30, 0x2e, 0x42, 0xc6, 0x49, 0x82, 0x19, 0x59,
	0xc6, 0x49, 0x48, 0x8c, 0x8b, 0x2d, 0x2d, 0x33, 0x35, 0x27, 0xc5, 0x51, 0x82, 0x05, 0x2c, 0x01,
	0xe5, 0xc1, 0xc5, 0x9d, 0x24, 0x58, 0x91, 0xc4, 0x9d, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x4a, 0x8b,
	0xf2, 0x24, 0xd8, 0xc0, 0xa2, 0x60, 0x36, 0xc8, 0x35, 0xa9, 0x79, 0x29, 0xa9, 0x29, 0x12, 0xec,
	0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x10, 0x8e, 0x93, 0xef, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x44, 0x19, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x23,
	0x3c, 0xaf, 0x8f, 0x14, 0x50, 0x15, 0xc8, 0x9c, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0x70,
	0x68, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x90, 0x3f, 0x34, 0x94, 0x50, 0x01, 0x00, 0x00,
}

func (m *ExistingGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistingGames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistingGames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ended {
		i--
		if m.Ended {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Turn) > 0 {
		i -= len(m.Turn)
		copy(dAtA[i:], m.Turn)
		i = encodeVarintExistingGames(dAtA, i, uint64(len(m.Turn)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FieldB) > 0 {
		i -= len(m.FieldB)
		copy(dAtA[i:], m.FieldB)
		i = encodeVarintExistingGames(dAtA, i, uint64(len(m.FieldB)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldA) > 0 {
		i -= len(m.FieldA)
		copy(dAtA[i:], m.FieldA)
		i = encodeVarintExistingGames(dAtA, i, uint64(len(m.FieldA)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PlayerB) > 0 {
		i -= len(m.PlayerB)
		copy(dAtA[i:], m.PlayerB)
		i = encodeVarintExistingGames(dAtA, i, uint64(len(m.PlayerB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlayerA) > 0 {
		i -= len(m.PlayerA)
		copy(dAtA[i:], m.PlayerA)
		i = encodeVarintExistingGames(dAtA, i, uint64(len(m.PlayerA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintExistingGames(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExistingGames(dAtA []byte, offset int, v uint64) int {
	offset -= sovExistingGames(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExistingGames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovExistingGames(uint64(l))
	}
	l = len(m.PlayerA)
	if l > 0 {
		n += 1 + l + sovExistingGames(uint64(l))
	}
	l = len(m.PlayerB)
	if l > 0 {
		n += 1 + l + sovExistingGames(uint64(l))
	}
	l = len(m.FieldA)
	if l > 0 {
		n += 1 + l + sovExistingGames(uint64(l))
	}
	l = len(m.FieldB)
	if l > 0 {
		n += 1 + l + sovExistingGames(uint64(l))
	}
	l = len(m.Turn)
	if l > 0 {
		n += 1 + l + sovExistingGames(uint64(l))
	}
	if m.Ended {
		n += 2
	}
	return n
}

func sovExistingGames(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExistingGames(x uint64) (n int) {
	return sovExistingGames(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExistingGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExistingGames
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistingGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistingGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExistingGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExistingGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExistingGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExistingGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExistingGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExistingGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExistingGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExistingGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExistingGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExistingGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExistingGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExistingGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Turn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ended", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ended = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExistingGames(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExistingGames
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExistingGames(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExistingGames
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExistingGames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExistingGames
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExistingGames
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExistingGames
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExistingGames        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExistingGames          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExistingGames = fmt.Errorf("proto: unexpected end of group")
)
