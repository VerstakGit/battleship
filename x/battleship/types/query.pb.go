// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: battleship/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetNextGameRequest struct {
}

func (m *QueryGetNextGameRequest) Reset()         { *m = QueryGetNextGameRequest{} }
func (m *QueryGetNextGameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNextGameRequest) ProtoMessage()    {}
func (*QueryGetNextGameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{2}
}
func (m *QueryGetNextGameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNextGameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNextGameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNextGameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNextGameRequest.Merge(m, src)
}
func (m *QueryGetNextGameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNextGameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNextGameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNextGameRequest proto.InternalMessageInfo

type QueryGetNextGameResponse struct {
	NextGame NextGame `protobuf:"bytes,1,opt,name=NextGame,proto3" json:"NextGame"`
}

func (m *QueryGetNextGameResponse) Reset()         { *m = QueryGetNextGameResponse{} }
func (m *QueryGetNextGameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNextGameResponse) ProtoMessage()    {}
func (*QueryGetNextGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{3}
}
func (m *QueryGetNextGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNextGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNextGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNextGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNextGameResponse.Merge(m, src)
}
func (m *QueryGetNextGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNextGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNextGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNextGameResponse proto.InternalMessageInfo

func (m *QueryGetNextGameResponse) GetNextGame() NextGame {
	if m != nil {
		return m.NextGame
	}
	return NextGame{}
}

type QueryGetExistingGamesRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetExistingGamesRequest) Reset()         { *m = QueryGetExistingGamesRequest{} }
func (m *QueryGetExistingGamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExistingGamesRequest) ProtoMessage()    {}
func (*QueryGetExistingGamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{4}
}
func (m *QueryGetExistingGamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExistingGamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExistingGamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExistingGamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExistingGamesRequest.Merge(m, src)
}
func (m *QueryGetExistingGamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExistingGamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExistingGamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExistingGamesRequest proto.InternalMessageInfo

func (m *QueryGetExistingGamesRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetExistingGamesResponse struct {
	ExistingGames ExistingGames `protobuf:"bytes,1,opt,name=existingGames,proto3" json:"existingGames"`
}

func (m *QueryGetExistingGamesResponse) Reset()         { *m = QueryGetExistingGamesResponse{} }
func (m *QueryGetExistingGamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExistingGamesResponse) ProtoMessage()    {}
func (*QueryGetExistingGamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{5}
}
func (m *QueryGetExistingGamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExistingGamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExistingGamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExistingGamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExistingGamesResponse.Merge(m, src)
}
func (m *QueryGetExistingGamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExistingGamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExistingGamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExistingGamesResponse proto.InternalMessageInfo

func (m *QueryGetExistingGamesResponse) GetExistingGames() ExistingGames {
	if m != nil {
		return m.ExistingGames
	}
	return ExistingGames{}
}

type QueryAllExistingGamesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExistingGamesRequest) Reset()         { *m = QueryAllExistingGamesRequest{} }
func (m *QueryAllExistingGamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExistingGamesRequest) ProtoMessage()    {}
func (*QueryAllExistingGamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{6}
}
func (m *QueryAllExistingGamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExistingGamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExistingGamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExistingGamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExistingGamesRequest.Merge(m, src)
}
func (m *QueryAllExistingGamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExistingGamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExistingGamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExistingGamesRequest proto.InternalMessageInfo

func (m *QueryAllExistingGamesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExistingGamesResponse struct {
	ExistingGames []ExistingGames     `protobuf:"bytes,1,rep,name=existingGames,proto3" json:"existingGames"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExistingGamesResponse) Reset()         { *m = QueryAllExistingGamesResponse{} }
func (m *QueryAllExistingGamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExistingGamesResponse) ProtoMessage()    {}
func (*QueryAllExistingGamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{7}
}
func (m *QueryAllExistingGamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExistingGamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExistingGamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExistingGamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExistingGamesResponse.Merge(m, src)
}
func (m *QueryAllExistingGamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExistingGamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExistingGamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExistingGamesResponse proto.InternalMessageInfo

func (m *QueryAllExistingGamesResponse) GetExistingGames() []ExistingGames {
	if m != nil {
		return m.ExistingGames
	}
	return nil
}

func (m *QueryAllExistingGamesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetActiveGamesByUserRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetActiveGamesByUserRequest) Reset()         { *m = QueryGetActiveGamesByUserRequest{} }
func (m *QueryGetActiveGamesByUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActiveGamesByUserRequest) ProtoMessage()    {}
func (*QueryGetActiveGamesByUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{8}
}
func (m *QueryGetActiveGamesByUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActiveGamesByUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActiveGamesByUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActiveGamesByUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActiveGamesByUserRequest.Merge(m, src)
}
func (m *QueryGetActiveGamesByUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActiveGamesByUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActiveGamesByUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActiveGamesByUserRequest proto.InternalMessageInfo

func (m *QueryGetActiveGamesByUserRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetActiveGamesByUserResponse struct {
	ActiveGamesByUser ActiveGamesByUser `protobuf:"bytes,1,opt,name=activeGamesByUser,proto3" json:"activeGamesByUser"`
}

func (m *QueryGetActiveGamesByUserResponse) Reset()         { *m = QueryGetActiveGamesByUserResponse{} }
func (m *QueryGetActiveGamesByUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActiveGamesByUserResponse) ProtoMessage()    {}
func (*QueryGetActiveGamesByUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{9}
}
func (m *QueryGetActiveGamesByUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActiveGamesByUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActiveGamesByUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActiveGamesByUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActiveGamesByUserResponse.Merge(m, src)
}
func (m *QueryGetActiveGamesByUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActiveGamesByUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActiveGamesByUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActiveGamesByUserResponse proto.InternalMessageInfo

func (m *QueryGetActiveGamesByUserResponse) GetActiveGamesByUser() ActiveGamesByUser {
	if m != nil {
		return m.ActiveGamesByUser
	}
	return ActiveGamesByUser{}
}

type QueryAllActiveGamesByUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveGamesByUserRequest) Reset()         { *m = QueryAllActiveGamesByUserRequest{} }
func (m *QueryAllActiveGamesByUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActiveGamesByUserRequest) ProtoMessage()    {}
func (*QueryAllActiveGamesByUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{10}
}
func (m *QueryAllActiveGamesByUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveGamesByUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveGamesByUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveGamesByUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveGamesByUserRequest.Merge(m, src)
}
func (m *QueryAllActiveGamesByUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveGamesByUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveGamesByUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveGamesByUserRequest proto.InternalMessageInfo

func (m *QueryAllActiveGamesByUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllActiveGamesByUserResponse struct {
	ActiveGamesByUser []ActiveGamesByUser `protobuf:"bytes,1,rep,name=activeGamesByUser,proto3" json:"activeGamesByUser"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActiveGamesByUserResponse) Reset()         { *m = QueryAllActiveGamesByUserResponse{} }
func (m *QueryAllActiveGamesByUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActiveGamesByUserResponse) ProtoMessage()    {}
func (*QueryAllActiveGamesByUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{11}
}
func (m *QueryAllActiveGamesByUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActiveGamesByUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActiveGamesByUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActiveGamesByUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActiveGamesByUserResponse.Merge(m, src)
}
func (m *QueryAllActiveGamesByUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActiveGamesByUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActiveGamesByUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActiveGamesByUserResponse proto.InternalMessageInfo

func (m *QueryAllActiveGamesByUserResponse) GetActiveGamesByUser() []ActiveGamesByUser {
	if m != nil {
		return m.ActiveGamesByUser
	}
	return nil
}

func (m *QueryAllActiveGamesByUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFinishedGamesRequest struct {
	PlayerID string `protobuf:"bytes,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
}

func (m *QueryGetFinishedGamesRequest) Reset()         { *m = QueryGetFinishedGamesRequest{} }
func (m *QueryGetFinishedGamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinishedGamesRequest) ProtoMessage()    {}
func (*QueryGetFinishedGamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{12}
}
func (m *QueryGetFinishedGamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinishedGamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinishedGamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinishedGamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinishedGamesRequest.Merge(m, src)
}
func (m *QueryGetFinishedGamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinishedGamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinishedGamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinishedGamesRequest proto.InternalMessageInfo

func (m *QueryGetFinishedGamesRequest) GetPlayerID() string {
	if m != nil {
		return m.PlayerID
	}
	return ""
}

type QueryGetFinishedGamesResponse struct {
	Games []*Game `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
}

func (m *QueryGetFinishedGamesResponse) Reset()         { *m = QueryGetFinishedGamesResponse{} }
func (m *QueryGetFinishedGamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinishedGamesResponse) ProtoMessage()    {}
func (*QueryGetFinishedGamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{13}
}
func (m *QueryGetFinishedGamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinishedGamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinishedGamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinishedGamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinishedGamesResponse.Merge(m, src)
}
func (m *QueryGetFinishedGamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinishedGamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinishedGamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinishedGamesResponse proto.InternalMessageInfo

func (m *QueryGetFinishedGamesResponse) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type QueryGetFinishedGamesByUserRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetFinishedGamesByUserRequest) Reset()         { *m = QueryGetFinishedGamesByUserRequest{} }
func (m *QueryGetFinishedGamesByUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinishedGamesByUserRequest) ProtoMessage()    {}
func (*QueryGetFinishedGamesByUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{14}
}
func (m *QueryGetFinishedGamesByUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinishedGamesByUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinishedGamesByUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinishedGamesByUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinishedGamesByUserRequest.Merge(m, src)
}
func (m *QueryGetFinishedGamesByUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinishedGamesByUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinishedGamesByUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinishedGamesByUserRequest proto.InternalMessageInfo

func (m *QueryGetFinishedGamesByUserRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetFinishedGamesByUserResponse struct {
	FinishedGamesByUser FinishedGamesByUser `protobuf:"bytes,1,opt,name=finishedGamesByUser,proto3" json:"finishedGamesByUser"`
}

func (m *QueryGetFinishedGamesByUserResponse) Reset()         { *m = QueryGetFinishedGamesByUserResponse{} }
func (m *QueryGetFinishedGamesByUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinishedGamesByUserResponse) ProtoMessage()    {}
func (*QueryGetFinishedGamesByUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{15}
}
func (m *QueryGetFinishedGamesByUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinishedGamesByUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinishedGamesByUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinishedGamesByUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinishedGamesByUserResponse.Merge(m, src)
}
func (m *QueryGetFinishedGamesByUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinishedGamesByUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinishedGamesByUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinishedGamesByUserResponse proto.InternalMessageInfo

func (m *QueryGetFinishedGamesByUserResponse) GetFinishedGamesByUser() FinishedGamesByUser {
	if m != nil {
		return m.FinishedGamesByUser
	}
	return FinishedGamesByUser{}
}

type QueryAllFinishedGamesByUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFinishedGamesByUserRequest) Reset()         { *m = QueryAllFinishedGamesByUserRequest{} }
func (m *QueryAllFinishedGamesByUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFinishedGamesByUserRequest) ProtoMessage()    {}
func (*QueryAllFinishedGamesByUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{16}
}
func (m *QueryAllFinishedGamesByUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFinishedGamesByUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFinishedGamesByUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFinishedGamesByUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFinishedGamesByUserRequest.Merge(m, src)
}
func (m *QueryAllFinishedGamesByUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFinishedGamesByUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFinishedGamesByUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFinishedGamesByUserRequest proto.InternalMessageInfo

func (m *QueryAllFinishedGamesByUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFinishedGamesByUserResponse struct {
	FinishedGamesByUser []FinishedGamesByUser `protobuf:"bytes,1,rep,name=finishedGamesByUser,proto3" json:"finishedGamesByUser"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFinishedGamesByUserResponse) Reset()         { *m = QueryAllFinishedGamesByUserResponse{} }
func (m *QueryAllFinishedGamesByUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFinishedGamesByUserResponse) ProtoMessage()    {}
func (*QueryAllFinishedGamesByUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd9acc8b196346d, []int{17}
}
func (m *QueryAllFinishedGamesByUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFinishedGamesByUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFinishedGamesByUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFinishedGamesByUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFinishedGamesByUserResponse.Merge(m, src)
}
func (m *QueryAllFinishedGamesByUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFinishedGamesByUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFinishedGamesByUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFinishedGamesByUserResponse proto.InternalMessageInfo

func (m *QueryAllFinishedGamesByUserResponse) GetFinishedGamesByUser() []FinishedGamesByUser {
	if m != nil {
		return m.FinishedGamesByUser
	}
	return nil
}

func (m *QueryAllFinishedGamesByUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "verstakgit.battleship.battleship.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "verstakgit.battleship.battleship.QueryParamsResponse")
	proto.RegisterType((*QueryGetNextGameRequest)(nil), "verstakgit.battleship.battleship.QueryGetNextGameRequest")
	proto.RegisterType((*QueryGetNextGameResponse)(nil), "verstakgit.battleship.battleship.QueryGetNextGameResponse")
	proto.RegisterType((*QueryGetExistingGamesRequest)(nil), "verstakgit.battleship.battleship.QueryGetExistingGamesRequest")
	proto.RegisterType((*QueryGetExistingGamesResponse)(nil), "verstakgit.battleship.battleship.QueryGetExistingGamesResponse")
	proto.RegisterType((*QueryAllExistingGamesRequest)(nil), "verstakgit.battleship.battleship.QueryAllExistingGamesRequest")
	proto.RegisterType((*QueryAllExistingGamesResponse)(nil), "verstakgit.battleship.battleship.QueryAllExistingGamesResponse")
	proto.RegisterType((*QueryGetActiveGamesByUserRequest)(nil), "verstakgit.battleship.battleship.QueryGetActiveGamesByUserRequest")
	proto.RegisterType((*QueryGetActiveGamesByUserResponse)(nil), "verstakgit.battleship.battleship.QueryGetActiveGamesByUserResponse")
	proto.RegisterType((*QueryAllActiveGamesByUserRequest)(nil), "verstakgit.battleship.battleship.QueryAllActiveGamesByUserRequest")
	proto.RegisterType((*QueryAllActiveGamesByUserResponse)(nil), "verstakgit.battleship.battleship.QueryAllActiveGamesByUserResponse")
	proto.RegisterType((*QueryGetFinishedGamesRequest)(nil), "verstakgit.battleship.battleship.QueryGetFinishedGamesRequest")
	proto.RegisterType((*QueryGetFinishedGamesResponse)(nil), "verstakgit.battleship.battleship.QueryGetFinishedGamesResponse")
	proto.RegisterType((*QueryGetFinishedGamesByUserRequest)(nil), "verstakgit.battleship.battleship.QueryGetFinishedGamesByUserRequest")
	proto.RegisterType((*QueryGetFinishedGamesByUserResponse)(nil), "verstakgit.battleship.battleship.QueryGetFinishedGamesByUserResponse")
	proto.RegisterType((*QueryAllFinishedGamesByUserRequest)(nil), "verstakgit.battleship.battleship.QueryAllFinishedGamesByUserRequest")
	proto.RegisterType((*QueryAllFinishedGamesByUserResponse)(nil), "verstakgit.battleship.battleship.QueryAllFinishedGamesByUserResponse")
}

func init() { proto.RegisterFile("battleship/query.proto", fileDescriptor_1fd9acc8b196346d) }

var fileDescriptor_1fd9acc8b196346d = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xdf, 0x6f, 0xdb, 0x54,
	0x14, 0xc7, 0x73, 0x57, 0x5a, 0x8d, 0x8b, 0x26, 0xb6, 0x9b, 0x68, 0x1b, 0xd6, 0xc8, 0xca, 0x45,
	0x6c, 0x55, 0x11, 0xf6, 0xd6, 0x6c, 0x28, 0x44, 0xa8, 0x6b, 0x42, 0x97, 0x80, 0x04, 0x68, 0x44,
	0xe2, 0x05, 0x34, 0x45, 0x37, 0xdd, 0xad, 0x63, 0x70, 0x6c, 0x2f, 0xbe, 0xa9, 0x12, 0x95, 0xbe,
	0xf0, 0xcc, 0x43, 0x25, 0xf8, 0x1f, 0xf8, 0x0f, 0xf8, 0x0f, 0x90, 0xfa, 0x82, 0x54, 0x81, 0x90,
	0x78, 0xe0, 0x97, 0xda, 0x4a, 0xbc, 0xf0, 0x47, 0xa0, 0x5c, 0x1f, 0x27, 0x76, 0x6d, 0xc7, 0x4e,
	0x1a, 0xde, 0x12, 0xdf, 0x7b, 0xce, 0xf9, 0x7e, 0xce, 0x3d, 0xd7, 0xe7, 0x18, 0x5f, 0x6f, 0x33,
	0x21, 0x4c, 0xee, 0x76, 0x0c, 0x47, 0x7b, 0xde, 0xe7, 0xbd, 0xa1, 0xea, 0xf4, 0x6c, 0x61, 0x93,
	0xd5, 0x3d, 0xde, 0x73, 0x05, 0xfb, 0x52, 0x37, 0x84, 0x3a, 0xd9, 0x12, 0xf8, 0xa9, 0x14, 0x74,
	0x5b, 0xb7, 0xe5, 0x66, 0x6d, 0xf4, 0xcb, 0xb3, 0x53, 0x6e, 0xe9, 0xb6, 0xad, 0x9b, 0x5c, 0x63,
	0x8e, 0xa1, 0x31, 0xcb, 0xb2, 0x05, 0x13, 0x86, 0x6d, 0xb9, 0xb0, 0xba, 0xbe, 0x63, 0xbb, 0x5d,
	0xdb, 0xd5, 0xda, 0xcc, 0xe5, 0x5e, 0x38, 0x6d, 0xef, 0x7e, 0x9b, 0x0b, 0x76, 0x5f, 0x73, 0x98,
	0x6e, 0x58, 0x72, 0x33, 0xec, 0xbd, 0x11, 0x50, 0xe6, 0xb0, 0x1e, 0xeb, 0xfa, 0x4e, 0x94, 0xc0,
	0x82, 0xc5, 0x07, 0xa2, 0xa5, 0xb3, 0x2e, 0x87, 0xb5, 0xdb, 0x81, 0x35, 0x3e, 0x30, 0x5c, 0x61,
	0x58, 0xba, 0x5c, 0xf7, 0x8d, 0xdf, 0x08, 0x6c, 0x60, 0x3b, 0xc2, 0xd8, 0xe3, 0xde, 0x72, 0xab,
	0x3d, 0x6c, 0xf5, 0x5d, 0xde, 0x83, 0x6d, 0xf9, 0xc0, 0x36, 0x31, 0x80, 0x87, 0x77, 0x03, 0x0f,
	0x77, 0x0d, 0xcb, 0x70, 0x3b, 0xfc, 0x59, 0x9c, 0x35, 0x2d, 0x60, 0xf2, 0xc9, 0x08, 0xee, 0x89,
	0x94, 0xdd, 0xe4, 0xcf, 0xfb, 0xdc, 0x15, 0xf4, 0x29, 0xce, 0x87, 0x9e, 0xba, 0x8e, 0x6d, 0xb9,
	0x9c, 0xd4, 0xf1, 0x8a, 0x87, 0x77, 0x13, 0xad, 0xa2, 0xb5, 0x97, 0x36, 0xd6, 0xd4, 0xb4, 0xd4,
	0xab, 0x9e, 0x87, 0xda, 0x0b, 0x47, 0x7f, 0xde, 0xce, 0x35, 0xc1, 0x9a, 0xbe, 0x82, 0x6f, 0x48,
	0xf7, 0x0d, 0x2e, 0x3e, 0xe6, 0x03, 0xd1, 0x60, 0x5d, 0xee, 0x47, 0xee, 0xe0, 0x9b, 0xd1, 0x25,
	0x08, 0xff, 0x21, 0xbe, 0xec, 0x3f, 0x03, 0x01, 0xeb, 0xe9, 0x02, 0x7c, 0x0b, 0x90, 0x30, 0xf6,
	0x40, 0x1f, 0xe0, 0x5b, 0x7e, 0xa4, 0xc7, 0x90, 0xfe, 0xd1, 0x73, 0x3f, 0x07, 0xa4, 0x80, 0x97,
	0x0d, 0xeb, 0x19, 0x1f, 0xc8, 0x50, 0x2f, 0x36, 0xbd, 0x3f, 0xf4, 0x2b, 0xfc, 0x6a, 0x82, 0x15,
	0x88, 0xfc, 0x1c, 0x5f, 0xe1, 0xc1, 0x05, 0x50, 0xaa, 0xa5, 0x2b, 0x0d, 0xf9, 0x03, 0xb9, 0x61,
	0x5f, 0x74, 0x17, 0x34, 0x57, 0x4d, 0x33, 0x56, 0x73, 0x1d, 0xe3, 0x49, 0x71, 0x42, 0xe4, 0x3b,
	0xaa, 0x57, 0xc9, 0xea, 0xa8, 0x92, 0x55, 0xef, 0xe2, 0x40, 0x25, 0xab, 0x4f, 0x98, 0xee, 0x67,
	0xbe, 0x19, 0xb0, 0xa4, 0x3f, 0x22, 0xc0, 0x8c, 0x06, 0x4a, 0xc6, 0x5c, 0x5a, 0x14, 0x26, 0x69,
	0x84, 0x30, 0x2e, 0x49, 0x8c, 0xbb, 0xa9, 0x18, 0x9e, 0xb2, 0x10, 0x47, 0x19, 0xaf, 0xfa, 0xa7,
	0x55, 0x95, 0x37, 0xc8, 0x0b, 0x3a, 0xfc, 0xd4, 0xe5, 0xbd, 0xe9, 0xe7, 0xfc, 0x0d, 0xc2, 0xaf,
	0x4d, 0x31, 0x85, 0x2c, 0xe8, 0xf8, 0x1a, 0x3b, 0xbf, 0x08, 0x69, 0x2f, 0xa5, 0x67, 0x22, 0xe2,
	0x17, 0xb2, 0x11, 0xf5, 0x49, 0xbf, 0x00, 0x90, 0xaa, 0x69, 0x26, 0x82, 0x2c, 0xea, 0xf0, 0x7f,
	0xf5, 0xd1, 0xe3, 0x83, 0x4d, 0x47, 0x5f, 0x5a, 0x34, 0xfa, 0xe2, 0x8a, 0xa1, 0x32, 0xb9, 0xf0,
	0x75, 0x78, 0x25, 0x86, 0x2e, 0x8f, 0x82, 0x2f, 0x3b, 0x26, 0x1b, 0xf2, 0xde, 0x07, 0xdb, 0x50,
	0x0b, 0xe3, 0xff, 0xf4, 0xe9, 0xe4, 0xda, 0x9f, 0xb3, 0x85, 0x74, 0xbc, 0x8b, 0x97, 0xf5, 0xc0,
	0x3d, 0xb8, 0x93, 0x9e, 0x02, 0xf9, 0x6a, 0xf3, 0x8c, 0x68, 0x05, 0xd3, 0x58, 0xf7, 0x59, 0x2a,
	0xf5, 0x3b, 0x84, 0x5f, 0x9f, 0x6a, 0x0c, 0x0a, 0xbb, 0x38, 0xbf, 0x1b, 0x5d, 0x86, 0x3a, 0x79,
	0x98, 0xae, 0x37, 0xc6, 0x37, 0x1c, 0x5a, 0x9c, 0x5f, 0x6a, 0x02, 0x52, 0xd5, 0x34, 0xa7, 0x20,
	0x2d, 0xaa, 0x66, 0xff, 0xf0, 0x93, 0x90, 0x14, 0x2e, 0x2d, 0x09, 0x4b, 0xff, 0x47, 0x12, 0x16,
	0x56, 0xbb, 0x1b, 0x87, 0x2f, 0xe3, 0x65, 0xc9, 0x47, 0xbe, 0x47, 0x78, 0xc5, 0x6b, 0xaa, 0xe4,
	0x41, 0xba, 0xde, 0x68, 0x6f, 0x57, 0x1e, 0xce, 0x68, 0xe5, 0xa9, 0xa1, 0xf7, 0xbe, 0xfe, 0xe5,
	0xec, 0xdb, 0x4b, 0xeb, 0x64, 0x4d, 0x9b, 0x98, 0x6b, 0x81, 0x29, 0x23, 0x32, 0x02, 0x91, 0x1f,
	0xd0, 0xa4, 0x5f, 0x93, 0x77, 0x32, 0x46, 0x8d, 0x8e, 0x04, 0x4a, 0x65, 0x1e, 0x53, 0x50, 0x5d,
	0x92, 0xaa, 0xdf, 0x22, 0x6f, 0xa6, 0xab, 0x1e, 0xcf, 0x67, 0xe4, 0x67, 0x84, 0xaf, 0x84, 0xba,
	0x14, 0xd9, 0xcc, 0x2e, 0x21, 0xae, 0x2f, 0x2b, 0x8f, 0xe6, 0xb6, 0x07, 0x8e, 0x2d, 0xc9, 0x51,
	0x21, 0xe5, 0x74, 0x8e, 0xf0, 0x2c, 0xa9, 0xed, 0xcb, 0xb7, 0xc4, 0x01, 0xf9, 0x09, 0xe1, 0xab,
	0x21, 0xdf, 0x55, 0xd3, 0xcc, 0xcc, 0x95, 0x30, 0x6f, 0x64, 0xe6, 0x4a, 0x1a, 0x23, 0x68, 0x59,
	0x72, 0x6d, 0x90, 0x7b, 0xb3, 0x72, 0x91, 0x33, 0x84, 0xaf, 0x45, 0xba, 0x08, 0xa9, 0x65, 0x4f,
	0x74, 0x52, 0x1f, 0x55, 0xde, 0xbb, 0x90, 0x0f, 0x00, 0xab, 0x4b, 0xb0, 0x2d, 0xb2, 0x99, 0x0e,
	0x16, 0x37, 0xdb, 0x8f, 0x8f, 0xed, 0x2f, 0x84, 0x0b, 0x91, 0x28, 0xa3, 0xa3, 0xab, 0x65, 0x4f,
	0xfd, 0x85, 0x49, 0xa7, 0x0d, 0x02, 0x74, 0x53, 0x92, 0x96, 0xc9, 0xdb, 0xf3, 0x91, 0x92, 0xdf,
	0x11, 0xbe, 0x7a, 0xbe, 0x75, 0xcd, 0x72, 0xe1, 0xe2, 0x7a, 0xf9, 0x2c, 0x17, 0x2e, 0xb6, 0x9f,
	0xd3, 0x86, 0xa4, 0xaa, 0x92, 0x47, 0xe9, 0x54, 0x3a, 0x17, 0xad, 0xf0, 0x37, 0x96, 0xb6, 0xef,
	0x0f, 0x0e, 0x07, 0xe4, 0x5f, 0x84, 0xf3, 0x31, 0x5d, 0x83, 0x6c, 0xcf, 0xa9, 0x30, 0x7c, 0x82,
	0x8f, 0x2f, 0xe8, 0x05, 0x68, 0xdf, 0x97, 0xb4, 0x35, 0xb2, 0x95, 0x4e, 0x1b, 0xff, 0x35, 0x39,
	0xae, 0xd7, 0x7f, 0x10, 0xbe, 0x1e, 0x13, 0x69, 0x54, 0xb1, 0xdb, 0xd9, 0xab, 0x6d, 0x01, 0xc4,
	0xd3, 0x07, 0x81, 0x59, 0x5e, 0xa8, 0xf1, 0xc4, 0xb5, 0x8f, 0x8e, 0x4e, 0x8a, 0xe8, 0xf8, 0xa4,
	0x88, 0xfe, 0x3e, 0x29, 0xa2, 0xc3, 0xd3, 0x62, 0xee, 0xf8, 0xb4, 0x98, 0xfb, 0xed, 0xb4, 0x98,
	0xfb, 0xac, 0xa4, 0x1b, 0xa2, 0xd3, 0x6f, 0xab, 0x3b, 0x76, 0x37, 0xc1, 0xfb, 0x20, 0xf8, 0x47,
	0x0c, 0x1d, 0xee, 0xb6, 0x57, 0xe4, 0xf7, 0x78, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d,
	0x7f, 0x22, 0x0c, 0xe6, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a NextGame by index.
	NextGame(ctx context.Context, in *QueryGetNextGameRequest, opts ...grpc.CallOption) (*QueryGetNextGameResponse, error)
	// Queries a ExistingGames by index.
	ExistingGames(ctx context.Context, in *QueryGetExistingGamesRequest, opts ...grpc.CallOption) (*QueryGetExistingGamesResponse, error)
	// Queries a list of ExistingGames items.
	ExistingGamesAll(ctx context.Context, in *QueryAllExistingGamesRequest, opts ...grpc.CallOption) (*QueryAllExistingGamesResponse, error)
	// Queries a ActiveGamesByUser by index.
	ActiveGamesByUser(ctx context.Context, in *QueryGetActiveGamesByUserRequest, opts ...grpc.CallOption) (*QueryGetActiveGamesByUserResponse, error)
	// Queries a list of ActiveGamesByUser items.
	ActiveGamesByUserAll(ctx context.Context, in *QueryAllActiveGamesByUserRequest, opts ...grpc.CallOption) (*QueryAllActiveGamesByUserResponse, error)
	// Queries a list of GetFinishedGames items.
	GetFinishedGames(ctx context.Context, in *QueryGetFinishedGamesRequest, opts ...grpc.CallOption) (*QueryGetFinishedGamesResponse, error)
	// Queries a FinishedGamesByUser by index.
	FinishedGamesByUser(ctx context.Context, in *QueryGetFinishedGamesByUserRequest, opts ...grpc.CallOption) (*QueryGetFinishedGamesByUserResponse, error)
	// Queries a list of FinishedGamesByUser items.
	FinishedGamesByUserAll(ctx context.Context, in *QueryAllFinishedGamesByUserRequest, opts ...grpc.CallOption) (*QueryAllFinishedGamesByUserResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextGame(ctx context.Context, in *QueryGetNextGameRequest, opts ...grpc.CallOption) (*QueryGetNextGameResponse, error) {
	out := new(QueryGetNextGameResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/NextGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExistingGames(ctx context.Context, in *QueryGetExistingGamesRequest, opts ...grpc.CallOption) (*QueryGetExistingGamesResponse, error) {
	out := new(QueryGetExistingGamesResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/ExistingGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExistingGamesAll(ctx context.Context, in *QueryAllExistingGamesRequest, opts ...grpc.CallOption) (*QueryAllExistingGamesResponse, error) {
	out := new(QueryAllExistingGamesResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/ExistingGamesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveGamesByUser(ctx context.Context, in *QueryGetActiveGamesByUserRequest, opts ...grpc.CallOption) (*QueryGetActiveGamesByUserResponse, error) {
	out := new(QueryGetActiveGamesByUserResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/ActiveGamesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveGamesByUserAll(ctx context.Context, in *QueryAllActiveGamesByUserRequest, opts ...grpc.CallOption) (*QueryAllActiveGamesByUserResponse, error) {
	out := new(QueryAllActiveGamesByUserResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/ActiveGamesByUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFinishedGames(ctx context.Context, in *QueryGetFinishedGamesRequest, opts ...grpc.CallOption) (*QueryGetFinishedGamesResponse, error) {
	out := new(QueryGetFinishedGamesResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/GetFinishedGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinishedGamesByUser(ctx context.Context, in *QueryGetFinishedGamesByUserRequest, opts ...grpc.CallOption) (*QueryGetFinishedGamesByUserResponse, error) {
	out := new(QueryGetFinishedGamesByUserResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/FinishedGamesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinishedGamesByUserAll(ctx context.Context, in *QueryAllFinishedGamesByUserRequest, opts ...grpc.CallOption) (*QueryAllFinishedGamesByUserResponse, error) {
	out := new(QueryAllFinishedGamesByUserResponse)
	err := c.cc.Invoke(ctx, "/verstakgit.battleship.battleship.Query/FinishedGamesByUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a NextGame by index.
	NextGame(context.Context, *QueryGetNextGameRequest) (*QueryGetNextGameResponse, error)
	// Queries a ExistingGames by index.
	ExistingGames(context.Context, *QueryGetExistingGamesRequest) (*QueryGetExistingGamesResponse, error)
	// Queries a list of ExistingGames items.
	ExistingGamesAll(context.Context, *QueryAllExistingGamesRequest) (*QueryAllExistingGamesResponse, error)
	// Queries a ActiveGamesByUser by index.
	ActiveGamesByUser(context.Context, *QueryGetActiveGamesByUserRequest) (*QueryGetActiveGamesByUserResponse, error)
	// Queries a list of ActiveGamesByUser items.
	ActiveGamesByUserAll(context.Context, *QueryAllActiveGamesByUserRequest) (*QueryAllActiveGamesByUserResponse, error)
	// Queries a list of GetFinishedGames items.
	GetFinishedGames(context.Context, *QueryGetFinishedGamesRequest) (*QueryGetFinishedGamesResponse, error)
	// Queries a FinishedGamesByUser by index.
	FinishedGamesByUser(context.Context, *QueryGetFinishedGamesByUserRequest) (*QueryGetFinishedGamesByUserResponse, error)
	// Queries a list of FinishedGamesByUser items.
	FinishedGamesByUserAll(context.Context, *QueryAllFinishedGamesByUserRequest) (*QueryAllFinishedGamesByUserResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NextGame(ctx context.Context, req *QueryGetNextGameRequest) (*QueryGetNextGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextGame not implemented")
}
func (*UnimplementedQueryServer) ExistingGames(ctx context.Context, req *QueryGetExistingGamesRequest) (*QueryGetExistingGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistingGames not implemented")
}
func (*UnimplementedQueryServer) ExistingGamesAll(ctx context.Context, req *QueryAllExistingGamesRequest) (*QueryAllExistingGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistingGamesAll not implemented")
}
func (*UnimplementedQueryServer) ActiveGamesByUser(ctx context.Context, req *QueryGetActiveGamesByUserRequest) (*QueryGetActiveGamesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveGamesByUser not implemented")
}
func (*UnimplementedQueryServer) ActiveGamesByUserAll(ctx context.Context, req *QueryAllActiveGamesByUserRequest) (*QueryAllActiveGamesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveGamesByUserAll not implemented")
}
func (*UnimplementedQueryServer) GetFinishedGames(ctx context.Context, req *QueryGetFinishedGamesRequest) (*QueryGetFinishedGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinishedGames not implemented")
}
func (*UnimplementedQueryServer) FinishedGamesByUser(ctx context.Context, req *QueryGetFinishedGamesByUserRequest) (*QueryGetFinishedGamesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishedGamesByUser not implemented")
}
func (*UnimplementedQueryServer) FinishedGamesByUserAll(ctx context.Context, req *QueryAllFinishedGamesByUserRequest) (*QueryAllFinishedGamesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishedGamesByUserAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNextGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/NextGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextGame(ctx, req.(*QueryGetNextGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExistingGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExistingGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExistingGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/ExistingGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExistingGames(ctx, req.(*QueryGetExistingGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExistingGamesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExistingGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExistingGamesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/ExistingGamesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExistingGamesAll(ctx, req.(*QueryAllExistingGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveGamesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActiveGamesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveGamesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/ActiveGamesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveGamesByUser(ctx, req.(*QueryGetActiveGamesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveGamesByUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActiveGamesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveGamesByUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/ActiveGamesByUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveGamesByUserAll(ctx, req.(*QueryAllActiveGamesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFinishedGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFinishedGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFinishedGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/GetFinishedGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFinishedGames(ctx, req.(*QueryGetFinishedGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinishedGamesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFinishedGamesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinishedGamesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/FinishedGamesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinishedGamesByUser(ctx, req.(*QueryGetFinishedGamesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinishedGamesByUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFinishedGamesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinishedGamesByUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verstakgit.battleship.battleship.Query/FinishedGamesByUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinishedGamesByUserAll(ctx, req.(*QueryAllFinishedGamesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "verstakgit.battleship.battleship.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NextGame",
			Handler:    _Query_NextGame_Handler,
		},
		{
			MethodName: "ExistingGames",
			Handler:    _Query_ExistingGames_Handler,
		},
		{
			MethodName: "ExistingGamesAll",
			Handler:    _Query_ExistingGamesAll_Handler,
		},
		{
			MethodName: "ActiveGamesByUser",
			Handler:    _Query_ActiveGamesByUser_Handler,
		},
		{
			MethodName: "ActiveGamesByUserAll",
			Handler:    _Query_ActiveGamesByUserAll_Handler,
		},
		{
			MethodName: "GetFinishedGames",
			Handler:    _Query_GetFinishedGames_Handler,
		},
		{
			MethodName: "FinishedGamesByUser",
			Handler:    _Query_FinishedGamesByUser_Handler,
		},
		{
			MethodName: "FinishedGamesByUserAll",
			Handler:    _Query_FinishedGamesByUserAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battleship/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNextGameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNextGameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNextGameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetNextGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNextGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNextGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NextGame.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetExistingGamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExistingGamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExistingGamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExistingGamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExistingGamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExistingGamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExistingGames.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExistingGamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExistingGamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExistingGamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExistingGamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExistingGamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExistingGamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExistingGames) > 0 {
		for iNdEx := len(m.ExistingGames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExistingGames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActiveGamesByUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActiveGamesByUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActiveGamesByUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActiveGamesByUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActiveGamesByUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActiveGamesByUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActiveGamesByUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveGamesByUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveGamesByUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveGamesByUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActiveGamesByUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActiveGamesByUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActiveGamesByUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActiveGamesByUser) > 0 {
		for iNdEx := len(m.ActiveGamesByUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveGamesByUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinishedGamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinishedGamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinishedGamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinishedGamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinishedGamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinishedGamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for iNdEx := len(m.Games) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Games[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinishedGamesByUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinishedGamesByUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinishedGamesByUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinishedGamesByUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinishedGamesByUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinishedGamesByUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinishedGamesByUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFinishedGamesByUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFinishedGamesByUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFinishedGamesByUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFinishedGamesByUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFinishedGamesByUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFinishedGamesByUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinishedGamesByUser) > 0 {
		for iNdEx := len(m.FinishedGamesByUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinishedGamesByUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNextGameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetNextGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NextGame.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetExistingGamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExistingGamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExistingGames.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExistingGamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExistingGamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExistingGames) > 0 {
		for _, e := range m.ExistingGames {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActiveGamesByUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActiveGamesByUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActiveGamesByUser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActiveGamesByUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActiveGamesByUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveGamesByUser) > 0 {
		for _, e := range m.ActiveGamesByUser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFinishedGamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFinishedGamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetFinishedGamesByUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFinishedGamesByUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FinishedGamesByUser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFinishedGamesByUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFinishedGamesByUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinishedGamesByUser) > 0 {
		for _, e := range m.FinishedGamesByUser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNextGameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNextGameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNextGameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNextGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNextGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNextGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextGame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExistingGamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExistingGamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExistingGamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExistingGamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExistingGamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExistingGamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingGames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExistingGames.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExistingGamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExistingGamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExistingGamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExistingGamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExistingGamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExistingGamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingGames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistingGames = append(m.ExistingGames, ExistingGames{})
			if err := m.ExistingGames[len(m.ExistingGames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActiveGamesByUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActiveGamesByUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActiveGamesByUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActiveGamesByUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActiveGamesByUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActiveGamesByUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveGamesByUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveGamesByUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveGamesByUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveGamesByUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveGamesByUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActiveGamesByUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActiveGamesByUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActiveGamesByUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveGamesByUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveGamesByUser = append(m.ActiveGamesByUser, ActiveGamesByUser{})
			if err := m.ActiveGamesByUser[len(m.ActiveGamesByUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinishedGamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinishedGamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinishedGamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinishedGamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinishedGamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinishedGamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &Game{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinishedGamesByUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinishedGamesByUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinishedGamesByUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinishedGamesByUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinishedGamesByUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinishedGamesByUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedGamesByUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinishedGamesByUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFinishedGamesByUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFinishedGamesByUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFinishedGamesByUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFinishedGamesByUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFinishedGamesByUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFinishedGamesByUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedGamesByUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishedGamesByUser = append(m.FinishedGamesByUser, FinishedGamesByUser{})
			if err := m.FinishedGamesByUser[len(m.FinishedGamesByUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
